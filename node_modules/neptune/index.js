
var neptune;
(function (neptune) {
    var Server = (function () {
        function Server(manager, logger) {
            var _this = this;
            this.manager = manager;
            this.logger = logger;
            this.manager.on('connection', function (socket) {
                _this.logger.log('neptune: on connection');

                socket.on('rooms', function (input) {
                    _this.logger.log('neptune: on rooms');

                    var rooms = [];

                    for (var n in _this.manager.rooms) {
                        rooms.push(n);
                    }

                    var output = {
                        messageid: input.messageid,
                        rooms: rooms
                    };

                    socket.emit('rooms', output);
                });

                socket.on('roomstate', function (input) {
                    _this.logger.log('neptune: on roomstate');

                    var clients = _this.manager.sockets.clients(input.room);

                    var output = {
                        messageid: input.messageid,
                        room: input.room,
                        clientids: clients.map(function (client) {
                            return client.id;
                        })
                    };

                    socket.emit('roomstate', output);
                });

                socket.on('join', function (input) {
                    _this.logger.log('neptune: on join');

                    socket.join(input.room, function () {
                        var output = {
                            messageid: input.messageid,
                            room: input.room
                        };

                        socket.emit('join', output);
                    });
                });

                socket.on('leave', function (input) {
                    _this.logger.log('neptune: on leave');

                    socket.leave(input.room, function () {
                        var output = {
                            messageid: input.messageid,
                            room: input.room
                        };

                        socket.emit('leave', output);
                    });
                });

                socket.on('candidate', function (input) {
                    _this.logger.log('neptune: on candidate');

                    var output = {
                        messageid: input.messageid,
                        channelid: input.channelid,
                        from: socket.id,
                        to: input.to,
                        candidate: input.candidate
                    };

                    var destination_socket = _this.manager.sockets.socket(input.to, false);

                    if (destination_socket) {
                        destination_socket.emit('candidate', output);
                    }
                });

                socket.on('offer', function (input) {
                    _this.logger.log('neptune: on offer');

                    var output = {
                        messageid: input.messageid,
                        from: socket.id,
                        channelid: input.channelid,
                        to: input.to,
                        info: input.info,
                        offer: input.offer
                    };

                    var destination_socket = _this.manager.sockets.socket(input.to, false);

                    if (destination_socket) {
                        destination_socket.emit('offer', output);
                    }
                });

                socket.on('answer', function (input) {
                    _this.logger.log('neptune: on answer');

                    var output = {
                        messageid: input.messageid,
                        from: socket.id,
                        channelid: input.channelid,
                        to: input.to,
                        info: input.info,
                        answer: input.answer
                    };
                    var destination_socket = _this.manager.sockets.socket(input.to, false);

                    if (destination_socket) {
                        destination_socket.emit('answer', output);
                    }
                });
            });
        }
        return Server;
    })();
    neptune.Server = Server;
})(neptune || (neptune = {}));

var neptune;
(function (neptune) {
    var RedisStore = (function () {
        function RedisStore(publisher, subscriber, client) {
            var _this = this;
            this.publisher = publisher;
            this.subscriber = subscriber;
            this.client = client;
            this.listeners = [];

            this.subscriber.on("pmessage", function (pattern, channel, message) {
                if (_this.listeners[pattern]) {
                    _this.listeners[pattern](message);
                }
            });
        }
        RedisStore.prototype.keys = function (callback) {
            this.client.lrange('neptune:client:keys', 0, -1, function (err, range) {
                if (!err) {
                    callback(range);

                    return;
                }

                callback([]);
            });
        };

        RedisStore.prototype.subscribe = function (key, callback, complete) {
            this.client.rpush('neptune:client:keys', key);

            this.subscriber.psubscribe(key);

            this.listeners[key] = callback;

            if (complete) {
                complete();
            }
        };

        RedisStore.prototype.unsubscribe = function (key, complete) {
            this.client.lrem('neptune:client:keys', -1, key);

            this.subscriber.punsubscribe(key);

            if (this.listeners[key]) {
                delete this.listeners[key];
            }

            if (complete) {
                complete();
            }
        };

        RedisStore.prototype.publish = function (key, value, complete) {
            this.publisher.publish(key, value);

            if (complete) {
                complete();
            }
        };
        return RedisStore;
    })();
    neptune.RedisStore = RedisStore;
})(neptune || (neptune = {}));


var neptune;
(function (neptune) {
    var MemoryStore = (function () {
        function MemoryStore() {
            this.listeners = [];
        }
        MemoryStore.prototype.keys = function (callback) {
            var keys = [];

            for (var key in this.listeners) {
                keys.push(key);
            }

            callback(keys);
        };

        MemoryStore.prototype.subscribe = function (key, callback, complete) {
            this.listeners[key] = callback;

            if (complete) {
                complete();
            }
        };

        MemoryStore.prototype.unsubscribe = function (key, complete) {
            if (this.listeners[key]) {
                delete this.listeners[key];
            }

            if (complete) {
                complete();
            }
        };

        MemoryStore.prototype.publish = function (key, value, complete) {
            if (this.listeners[key]) {
                var subscriber = this.listeners[key];

                subscriber(value);
            }

            if (complete) {
                complete();
            }
        };
        return MemoryStore;
    })();
    neptune.MemoryStore = MemoryStore;
})(neptune || (neptune = {}));

var neptune;
(function (neptune) {
    var ConsoleLogger = (function () {
        function ConsoleLogger() {
        }
        ConsoleLogger.prototype.log = function (str) {
            console.log(str);
        };
        return ConsoleLogger;
    })();
    neptune.ConsoleLogger = ConsoleLogger;
})(neptune || (neptune = {}));

var neptune;
(function (neptune) {
    var NullLogger = (function () {
        function NullLogger() {
        }
        NullLogger.prototype.log = function (str) {
        };
        return NullLogger;
    })();
    neptune.NullLogger = NullLogger;
})(neptune || (neptune = {}));



module.exports = neptune;
