var neptune;
(function (neptune) {
    var NullLogger = (function () {
        function NullLogger() {
        }
        NullLogger.prototype.log = function (str) {
        };
        return NullLogger;
    })();
    neptune.NullLogger = NullLogger;
})(neptune || (neptune = {}));
var neptune;
(function (neptune) {
    var ConsoleLogger = (function () {
        function ConsoleLogger() {
        }
        ConsoleLogger.prototype.log = function (str) {
            console.log(str);
        };
        return ConsoleLogger;
    })();
    neptune.ConsoleLogger = ConsoleLogger;
})(neptune || (neptune = {}));
var neptune;
(function (neptune) {
    var Server = (function () {
        function Server(manager, logger) {
            var _this = this;
            this.manager = manager;
            this.logger = logger;
            this.manager.on('connection', function (socket) {
                _this.logger.log('neptune: on connection ' + socket.id);

                socket.on('rooms', function (input) {
                    _this.logger.log('neptune: ' + socket.id + ' on rooms');

                    var rooms = [];

                    for (var n in _this.manager.rooms) {
                        rooms.push(n);
                    }

                    var output = {
                        tid: input.tid,
                        rooms: rooms
                    };

                    _this.logger.log('neptune: ' + socket.id + ' sending rooms');

                    socket.emit('rooms', output);
                });

                socket.on('clients', function (input) {
                    _this.logger.log('neptune: ' + socket.id + ' on clients');

                    var clients = _this.manager.sockets.clients(input.room);

                    var output = {
                        tid: input.tid,
                        room: input.room,
                        clientids: clients.map(function (client) {
                            return client.id;
                        })
                    };

                    _this.logger.log('neptune: ' + socket.id + ' sending clients');

                    socket.emit('clients', output);
                });

                socket.on('join', function (input) {
                    _this.logger.log('neptune: ' + socket.id + ' on join');

                    socket.join(input.room, function () {
                        var output = {
                            tid: input.tid,
                            clientid: socket.id,
                            room: input.room
                        };

                        _this.logger.log('neptune: ' + socket.id + ' sending join');

                        socket.emit('join', output);

                        _this.logger.log('neptune: room:' + input.room + ' sending join');

                        socket.broadcast.to(input.room).emit('join', output);
                    });
                });

                socket.on('leave', function (input) {
                    _this.logger.log('neptune: ' + socket.id + ' on leave');

                    socket.leave(input.room, function () {
                        var output = {
                            tid: input.tid,
                            clientid: socket.id,
                            room: input.room
                        };

                        _this.logger.log('neptune: ' + socket.id + ' sending leave');

                        socket.emit('leave', output);

                        _this.logger.log('neptune: room:' + input.room + ' sending leave');

                        socket.broadcast.to(input.room).emit('leave', output);
                    });
                });

                socket.on('candidate', function (input) {
                    _this.logger.log('neptune: ' + socket.id + ' on candidate');

                    var output = {
                        tid: input.tid,
                        from: socket.id,
                        to: input.to,
                        connection: input.connection,
                        candidate: input.candidate
                    };

                    var destination_socket = _this.manager.sockets.socket(input.to, false);

                    if (destination_socket) {
                        _this.logger.log('neptune: ' + input.to + ' sending candidate');

                        destination_socket.emit('candidate', output);
                    }
                });

                socket.on('offer', function (input) {
                    _this.logger.log('neptune: ' + socket.id + ' on offer');

                    var output = {
                        tid: input.tid,
                        from: socket.id,
                        to: input.to,
                        connection: input.connection,
                        offer: input.offer
                    };

                    var destination_socket = _this.manager.sockets.socket(input.to, false);

                    if (destination_socket) {
                        _this.logger.log('neptune: ' + input.to + ' sending offer');

                        destination_socket.emit('offer', output);
                    }
                });

                socket.on('answer', function (input) {
                    _this.logger.log('neptune: ' + socket.id + ' on answer');

                    var output = {
                        tid: input.tid,
                        from: socket.id,
                        to: input.to,
                        connection: input.connection,
                        answer: input.answer
                    };

                    var destination_socket = _this.manager.sockets.socket(input.to, false);

                    if (destination_socket) {
                        _this.logger.log('neptune: ' + input.to + ' sending answer');

                        destination_socket.emit('answer', output);
                    }
                });
            });
        }
        return Server;
    })();
    neptune.Server = Server;
})(neptune || (neptune = {}));
module.exports = neptune;
